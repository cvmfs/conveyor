#!/usr/bin/env python3

import argparse
import json
import pika
import sys

from common import read_config, create_job_description
from pprint import pprint

# Constant values
job_exchange = 'jobs.new'
job_routing_key = ''


def parse_args():
    parser = argparse.ArgumentParser(description='Submit a publishing job.')
    parser.add_argument('repo', help='repository name')
    parser.add_argument('payload', help='payload URL')
    parser.add_argument(
        '-c', '--config', default='/etc/cvmfs/publisher/config.json', help='config file')
    parser.add_argument(
        '-s', '--script', help='script to run during transaction')
    parser.add_argument(
        '--script-args', help='arguments for the transaction script')
    parser.add_argument(
        '--remote-script', action='store_true', help='transaction script is a remote file')
    parser.add_argument(
        '-d', '--deps', help='Comma-separated list of IDs of job dependencies')
    return parser.parse_args()


def main():
    arguments = parse_args()

    config_file = arguments.config

    config = read_config(config_file)
    rmq_config = config['rabbitmq']

    credentials = pika.PlainCredentials(rmq_config['username'],
                                        rmq_config['password'])

    parameters = pika.ConnectionParameters(
        rmq_config['url'], rmq_config['port'], rmq_config['vhost'], credentials)
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()

    channel.exchange_declare(
        exchange=job_exchange, exchange_type='direct', durable=True)

    job_description = create_job_description(arguments.repo,
                                             arguments.payload,
                                             script=arguments.script,
                                             script_args=arguments.script_args,       remote_script=arguments.remote_script,         deps=arguments.deps)

    print('Job description:')
    pprint(job_description)

    msg = json.dumps(job_description)

    channel.basic_publish(exchange=job_exchange,
                          routing_key=job_routing_key,
                          body=msg,
                          properties=pika.BasicProperties(delivery_mode=2))

    print('Result:')
    result = {'status': 'ok', 'job_id': job_description['id']}
    print(json.dumps(result))


if __name__ == '__main__':
    main()
