#!/usr/bin/env python3

import argparse
import pika
import time

from common import get_rmq_creds

# Constant values
job_exchange = 'jobs.new'
job_queue = 'jobs.new'
job_routing_key = ''


def parse_args():
    parser = argparse.ArgumentParser(description='Process some integers.')
    parser.add_argument('integers', metavar='N', type=int, nargs='+',
                        help='an integer for the accumulator')
    parser.add_argument('--sum', dest='accumulate', action='store_const',
                        const=sum, default=max,
                        help='sum the integers (default: find the max)')
    return parser.parse_args()


def callback(ch, method, properties, body):
    print(" [x] Received %r" % body)
    time.sleep(body.count(b'.'))
    print(" [x] Done")
    ch.basic_ack(delivery_tag=method.delivery_tag)


def main():
    rmq_creds = get_rmq_creds()
    if rmq_creds == None:
        print('RabbitMQ credentials are not provided. '
              'CVMFS_RMQ_URL, CVMFS_RMQ_USERNAME and CVMFS_RMQ_PASSWORD '
              'should be defined.')
        exit(1)

    credentials = pika.PlainCredentials(rmq_creds['username'],
                                        rmq_creds['password'])
    parameters = pika.ConnectionParameters(rmq_creds['url'],
                                           rmq_creds['port'],
                                           rmq_creds['vhost'],
                                           credentials)
    connection = pika.BlockingConnection(parameters)
    channel = connection.channel()
    channel.basic_qos(prefetch_count=1)

    result = channel.queue_declare(queue=job_queue)
    queue = result.method.queue
    channel.queue_bind(exchange=job_exchange, routing_key='', queue=queue)
    channel.basic_consume(callback,
                          queue=queue,
                          no_ack=False)

    print(' [*] Waiting for messages. To exit, press Ctrl-C')
    channel.start_consuming()


if __name__ == '__main__':
    main()
